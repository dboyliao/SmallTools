#!/usr/bin/env -S python3 -u

"""
This small tool will automatic add proper '#!' line
at the begining of your scripts.
"""

import os
import argparse

_supported_interpretor = {
    "swift_xc": ("#!/usr/bin/env xcrun swift\n", ".swift"),
    "swift": ("#!/usr/bin/env swift\n", ".swift"),
    "pytohn": ("#!/usr/bin/env python\n", ".py"),
    "python2": ("#!/usr/bin/env python2\n", ".py"),
    "python3": ("#!/usr/bin/env python3\n", ".py"),
    "bash": ("#!/usr/bin/env bash", ".sh"),
    "sh": ("#!/usr/bin/env sh", ".sh"),
}


def main(interpretor, file_name, overwrite):
    """
    main program
    """
    interpretor, target_ext = _supported_interpretor[interpretor]
    _, ext = os.path.splitext(file_name)
    if ext == target_ext:
        with open(file_name, "r") as rf:
            # Read contents.
            lines = rf.readlines()
            try:
                first_line = lines[0]
            except IndexError:
                # Empty file, do nothing.
                return 0
        # Skip if there is already one which we desire.
        if first_line == interpretor:
            return 0
        elif first_line.startswith("#!"):
            # Found existing interpretor. Overwrite it or not.
            if not overwrite:
                print(
                    "[Warning] Detecting other interpretor in file: {}".format(
                        file_name
                    )
                )
                print("Do nothing")
                return 0
            lines = lines[1:]

        with open(file_name, "w") as wf:
            content = "".join(lines)
            wf.seek(0)
            wf.write(interpretor)
            wf.write(content)
    else:
        print(f"expecting file with ext {target_ext}, get {ext}")
        return 1


if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog="add_interpretor")
    parser.add_argument(
        "-i",
        "--interpretor",
        dest="interpretor",
        help="interpretor to be used. ex: python",
        metavar="INTERPRETOR",
        required=True,
    )
    parser.add_argument(
        "-f",
        "--file-name",
        help="the file to be processed",
        required=True,
    )
    parser.add_argument(
        "-o",
        "--overwrite",
        dest="overwrite",
        help="overwrite interpretor if there is any.",
        action="store_true",
    )

    kwargs = vars(parser.parse_args())
    main(**kwargs)
