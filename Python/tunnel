#!/usr/bin/env -S python3 -u
# -*- coding: utf8 -*-
from __future__ import print_function
import re
import subprocess as sp
import argparse
import sys
import os
import yaml


if os.name != "posix":
    print("Only support Unix/Linux System. Sorry....", file=sys.stderr)
    sys.exit(3)

DEFAULT_CONFIG_FILE = os.path.join(os.path.expanduser("~"), ".tunnel_config.yaml")


class _ConfigParser(object):
    def __init__(self, path=None):
        if path and os.path.exists(path):
            with open(path) as fid:
                config_data = yaml.load(fid)
        else:
            config_data = {"HEAD": "default", "default": {}}
        self._path = path
        self._head = config_data.pop("HEAD")
        self._data = config_data

    @property
    def path(self):
        return self._path

    @property
    def data(self):
        return self._data.copy()

    @property
    def head_data(self):
        return self._data.get(self._head, {})

    @property
    def head(self):
        return self._head

    @head.setter
    def head(self, new_head):
        assert isinstance(new_head, str), "HEAD has to be string"
        self._head = new_head

    def get(self, key):
        return self._data.get(key, None)

    def set(self, key, value):
        self._data[key] = value

    def update(self, new_config):
        assert isinstance(
            new_config, dict
        ), "new config should be a dict, get {}".format(new_config)
        if self._head in self._data:
            self._data[self._head].update(new_config)
        else:
            self._data[self._head] = new_config

    def save(self, path=DEFAULT_CONFIG_FILE):
        with open(path, "w") as wf:
            data = {}
            data["HEAD"] = self._head
            data.update(self._data)
            yaml.dump(data, wf, default_flow_style=False)

    def __str__(self):
        data = {}
        data[self._head] = self._data[self._head]
        return yaml.dump(data, default_flow_style=False)


def bind(
    port, user_name=None, dest=None, id_file=None, host="127.0.0.1", ssh_port="22"
):
    """
    Binding local port to remote port
    """
    config_parser = _ConfigParser(DEFAULT_CONFIG_FILE)
    data = config_parser.data

    if user_name:
        data["user_name"] = user_name
    if dest:
        data["dest"] = dest
    assert (
        data.get("user_name", None) is not None
    ), "user name not given and can't find it in the config file"
    assert (
        data.get("dest", None) is not None
    ), "destination not given and can't find it in the config file"
    assert port is not None, "no port for tunneling"

    user_name = data["user_name"]
    dest = data["dest"]
    host = data.get("host", host)
    ssh_port = data.get("ssh_port", ssh_port)
    err_code = _ssh_forward(user_name, dest, port, id_file, host, ssh_port)
    return err_code


def _ssh_forward(user_name, dest, port, id_file=None, host="127.0.0.1", ssh_port="22"):
    if id_file:
        cmd = [
            "ssh",
            "-i",
            id_file,
            "-p",
            ssh_port,
            "-L",
            "{port}:{host}:{port}".format(port=port, host=host),
            "{}@{}".format(user_name, dest),
            "-f",
            "-N",
        ]
    else:
        cmd = [
            "ssh",
            "-p",
            ssh_port,
            "-L",
            "{port}:{host}:{port}".format(port=port, host=host),
            "{}@{}".format(user_name, dest),
            "-f",
            "-N",
        ]
    err_code = sp.call(cmd)
    return err_code


def break_connect(dest=None, port=None):
    """
    Break connection to remote port
    """
    config_parser = _ConfigParser(DEFAULT_CONFIG_FILE)
    data = config_parser.data
    if dest:
        data["dest"] = dest
    assert (
        data.get("dest", None) is not None
    ), "destination not given and can't find it in config file"
    dest = data["dest"]
    p_ssh_tunnel = sp.Popen(
        "ps aux | grep ssh | grep -- -L", shell=True, stdout=sp.PIPE
    )
    p_dest = sp.Popen(["grep", dest], stdin=p_ssh_tunnel.stdout, stdout=sp.PIPE)
    if port:
        print("Break pipe connecting {}:{}".format(dest, port))
        p_port = sp.Popen(["grep", port], stdin=p_dest.stdout, stdout=sp.PIPE)
        p_kill = sp.Popen(
            "awk '{ print $2 }' | xargs kill", shell=True, stdin=p_port.stdout
        )
    else:
        print("Breaking all pipes to {}".format(dest))
        p_kill = sp.Popen(
            "awk '{ print $2 }' | xargs kill", shell=True, stdin=p_dest.stdout
        )
    p_ssh_tunnel.stdout.close()
    _, err = p_kill.communicate()
    if err:
        return 2
    return 0


def ls_tunnel():
    """
    List all port tunneling
    """
    p_all_tunnel = sp.Popen(
        "ps aux | grep ssh | grep -v grep | grep -- -L", stdout=sp.PIPE, shell=True
    )
    out, err = p_all_tunnel.communicate()
    if err:
        print(err, file=sys.stderr)
        return 2

    forward_pattern = re.compile(r"(\d*):([\d\w\.]*):\d*")
    dest_pattern = re.compile(r"([\w\d\.]*)@([\w\d\.]*)")
    out = out.decode("utf8")
    forward_matchs = [m for m in forward_pattern.finditer(out)]
    dest_matchs = [m for m in dest_pattern.finditer(out)]
    if not dest_matchs:
        print("No pipes detected")
    else:
        for forward_m, dest_m in zip(forward_matchs, dest_matchs):
            port = forward_m.group(1)
            host = forward_m.group(2)
            user = dest_m.group(1)
            dest = dest_m.group(2)
            print(
                "{host}:{port} --> {user}@{dest}:{port}".format(
                    host=host, port=port, user=user, dest=dest
                )
            )
    return 0


def config():
    """
    Setup default configuration
    """
    print("leave blank to use original configuration", flush=True)
    print("press ctrl-C/ctrl-D to interrupt", flush=True)
    modified = False
    config_parser = _ConfigParser(DEFAULT_CONFIG_FILE)
    try:
        old_head = config_parser.head
        prompt = "HEAD ({}): ".format(old_head)
        head = input(prompt)
        if head:
            config_parser.head = head
            modified = True
        data = config_parser.head_data

        old_user_name = data.get("user_name", None)
        prompt = (
            old_user_name is None
            and "user name: "
            or "user name ({}): ".format(old_user_name)
        )
        user_name = input(prompt)
        if user_name:
            data["user_name"] = user_name
            modified = True

        old_dest = data.get("dest", None)
        prompt = (
            old_dest is None
            and "destination: "
            or "destination ({}): ".format(old_dest)
        )
        dest = input(prompt)
        if dest:
            data["dest"] = dest
            modified = True

        old_id_file = data.get("id_file", None)
        prompt = (
            old_id_file is None and "id file: " or "id file ({}): ".format(old_id_file)
        )
        id_file = input(prompt)
        if id_file:
            data["id_file"] = id_file
            modified = True

        old_host = data.get("host", None)
        prompt = old_host is None and "host: " or "host ({}): ".format(old_host)
        host = input(prompt)
        if host:
            data["host"] = host
            modified = True

        old_ssh_port = data.get("ssh_port", None)
        prompt = (
            old_ssh_port is None
            and "ssh port: "
            or "ssh port ({}): ".format(old_ssh_port)
        )
        ssh_port = input(prompt)
        if ssh_port:
            data["ssh_port"] = ssh_port
            modified = True
    except (EOFError, KeyboardInterrupt):
        print()
    finally:
        if modified:
            print("Saving new configuration")
            config_parser.update(data)
            config_parser.save(DEFAULT_CONFIG_FILE)
        print()
        print("Current Config")
        print("--------------")
        print(config_parser)
    return 0


def ls_config():
    """
    List content of default configuration
    """
    if not os.path.exists(DEFAULT_CONFIG_FILE):
        print("No config file found: {}".format(DEFAULT_CONFIG_FILE), file=sys.stderr)
        return 2
    config_parser = _ConfigParser(DEFAULT_CONFIG_FILE)
    print(config_parser)
    return 0


if __name__ == "__main__":
    # pylint: disable=line-too-long, C0103
    config_parser = _ConfigParser(DEFAULT_CONFIG_FILE)
    config_content = config_parser.head_data
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="subcmd", help="Subcommands")
    # binding parser
    bind_parser = subparsers.add_parser("bind", help="binding local port to remote")
    bind_parser.add_argument("port", help="port to bind")
    bind_parser.add_argument(
        "-u",
        "--user-name",
        dest="user_name",
        help="user name for login (default: %(default)s)",
        default=config_content.get("user_name", None),
    )
    bind_parser.add_argument(
        "-d",
        "--destination",
        dest="dest",
        metavar="ADDRESS",
        help="destination address (default: %(default)s)",
        default=config_content.get("dest", None),
    )
    bind_parser.add_argument(
        "-i",
        "--id-file",
        dest="id_file",
        metavar="ID_FILE",
        help="login id file (default: %(default)s)",
        default=config_content.get("id_file", None),
    )
    bind_parser.add_argument(
        "-H",
        "--host",
        dest="host",
        metavar="ADDRESS",
        default="127.0.0.1",
        help="host address (default: %(default)s)",
    )
    bind_parser.add_argument(
        "-P",
        "--ssh-port",
        dest="ssh_port",
        metavar="PORT",
        help="ssh port (default: %(default)s)",
        default=config_content.get("ssh_port", "22"),
    )
    # break_connect parser
    break_parser = subparsers.add_parser("break", help="break tunneling")
    break_parser.add_argument(
        "-d",
        "--destination",
        dest="dest",
        default=config_content.get("dest", None),
        help="destination to break connection (default: %(default)s)",
    )
    break_parser.add_argument(
        "-p",
        "--port",
        dest="port",
        default=None,
        help=("port to break (default: %(default)s, " " break all port)"),
    )
    # ls_tunnel parser
    ls_tunnel_parser = subparsers.add_parser("ls", help="list all tunneling")
    # config parser
    config_parser = subparsers.add_parser("config", help="setup default configuration")
    config_parser.add_argument(
        "--show", action="store_true", help="show current default configurations"
    )

    subcmd = parser.parse_args().subcmd
    argv = sys.argv[2:]
    if subcmd == "bind":
        bind_args = vars(bind_parser.parse_args(argv))
        err_code = bind(**bind_args)
    elif subcmd == "break":
        break_args = vars(break_parser.parse_args(argv))
        err_code = break_connect(**break_args)
    elif subcmd == "ls":
        err_code = ls_tunnel()
    elif subcmd == "config":
        config_args = vars(config_parser.parse_args(argv))
        if config_args["show"]:
            err_code = ls_config()
        else:
            err_code = config()
    else:
        parser.print_help()
        err_code = 1
    sys.exit(err_code)
