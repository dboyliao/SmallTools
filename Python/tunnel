#!/usr/bin/env python3
# -*- coding: utf8 -*-
from __future__ import print_function
import re
import subprocess as sp
import argparse
import sys
import os
import yaml


if os.name != "posix":
    print("Only support Unix/Linux System. Sorry....", file=sys.stderr)
    sys.exit(3)


def bind(port, user_name=None, dest=None,
         id_file=None, host='127.0.0.1', ssh_port='22'):
    """
    Binding local port to remote port
    """
    config = _read_config()
    if user_name:
        config["user_name"] = user_name
    if dest:
        config["dest"] = dest
    assert config.get("user_name", None) is not None, \
        "user name not given and can't find it in the config file"
    assert config.get("dest", None) is not None, \
        "destination not given and can't find it in the config file"
    assert port is not None, \
        "no port for tunneling"

    user_name = config["user_name"]
    dest = config["dest"]
    host = config.get("host", host)
    ssh_port = config.get("ssh_port", ssh_port)
    err_code = _ssh_forward(user_name, dest, port, id_file, host, ssh_port)
    return err_code


def _ssh_forward(user_name, dest, port,
                 id_file=None, host="127.0.0.1", ssh_port='22'):
    if id_file:
        cmd = ["ssh", "-i", id_file,
               "-p", ssh_port, 
               "-L", "{port}:{host}:{port}".format(port=port, host=host),
               "{}@{}".format(user_name, dest),
               "-f", "-N"]
    else:
        cmd = ["ssh", "-p", ssh_port, "-L",
                "{port}:{host}:{port}".format(port=port, host=host),
                "{}@{}".format(user_name, dest),
                "-f", "-N"]
    err_code = sp.call(cmd)
    return err_code


def break_connect(dest=None, port=None):
    """
    Break connection to remote port
    """
    config = _read_config()
    if dest:
        config["dest"] = dest
    assert config.get("dest", None) is not None, \
       "destination not given and can't find it in config file"
    dest = config["dest"]
    p_ssh_tunnel = sp.Popen("ps aux | grep ssh | grep -- -L",
                            shell=True, stdout=sp.PIPE)
    p_dest = sp.Popen(["grep", dest], 
                      stdin=p_ssh_tunnel.stdout, stdout=sp.PIPE)
    if port:
        print("Break pipe connecting {}:{}".format(dest, port))
        p_port = sp.Popen(["grep", port], stdin=p_dest.stdout, stdout=sp.PIPE)
        p_kill = sp.Popen("awk '{ print $2 }' | xargs kill",
                          shell=True,
                          stdin=p_port.stdout)
    else:
        print("Breaking all pipes to {}".format(dest))
        p_kill = sp.Popen("awk '{ print $2 }' | xargs kill",
                          shell=True,
                          stdin=p_dest.stdout)
    p_ssh_tunnel.stdout.close()
    _, err = p_kill.communicate()
    if err:
        return 2
    return 0


def ls_tunnel():
    """
    List all port tunneling
    """
    p_all_tunnel = sp.Popen("ps aux | grep ssh | grep -v grep | grep -- -L",
                            stdout=sp.PIPE,
                            shell=True)
    out, err = p_all_tunnel.communicate()
    if err:
        print(err, file=sys.stderr)
        return 2

    forward_pattern = re.compile(r"(\d*):([\d\w\.]*):\d*")
    dest_pattern = re.compile(r"([\w\d\.]*)@([\w\d\.]*)")
    out = out.decode('utf8')
    forward_matchs = [m for m in forward_pattern.finditer(out)]
    dest_matchs = [m for m in dest_pattern.finditer(out)]
    if not dest_matchs:
        print("No pipes detected")
    else:
        for forward_m, dest_m in zip(forward_matchs, dest_matchs): 
            port = forward_m.group(1)
            host = forward_m.group(2)
            user = dest_m.group(1)
            dest = dest_m.group(2)
            print("{host}:{port} --> {user}@{dest}:{port}".format(host=host,
                                                                  port=port,
                                                                  user=user,
                                                                  dest=dest))
    return 0


def config():
    """
    Setup default configuration
    """
    data = _read_config()

    print("leave blank to use original configuration")
    old_user_name = data.get("user_name", None)
    prompt = old_user_name is None and \
            "user name: " or \
            "user name ({}): ".format(old_user_name)
    user_name = input(prompt)

    old_dest = data.get("dest", None)
    prompt = old_dest is None and \
            "destination: " or \
            "destination ({}): ".format(old_dest)
    dest = input(prompt)

    old_id_file = data.get("id_file", None)
    prompt = old_id_file is None and \
             "id file: " or \
             "id file ({}): ".format(old_id_file)
    id_file = input(prompt)

    old_host = data.get("host", None)
    prompt = old_host is None and \
             "host: " or \
             "host ({}): ".format(old_host)
    host = input(prompt)

    old_ssh_port = data.get("ssh_port", None)
    prompt = old_ssh_port is None and \
             "ssh port: " or \
             "ssh port ({}): ".format(old_ssh_port)
    ssh_port = input(prompt)

    if user_name:
        data["user_name"] = user_name
    if dest:
        data["dest"] = dest
    if host:
        data["host"] = host
    if ssh_port:
        data["ssh_port"] = ssh_port
    if id_file:
        dest["id_file"] = id_file

    config_path = _get_config_path()
    with open(config_path, "w") as wf:
        yaml.dump({"tunnel": data}, wf, default_flow_style=False)


def ls_config():
    """
    List content of default configuration
    """
    config_path = _get_config_path()
    if not os.path.exists(config_path):
        print("No config file found", file=sys.stderr)
        return 2
    with open(config_path, "r") as rf:
        print(rf.read())
    return 0


def _get_config_path():
    home_dir = os.path.expanduser("~")
    config_path = os.path.join(home_dir, ".tunnel_config.yaml")
    return config_path


def _read_config():
    config_path = _get_config_path()
    if os.path.exists(config_path):
        with open(config_path, "r") as rf:
            config_content = yaml.load(rf)
        return config_content["tunnel"]
    else:
        return {}


if __name__ == "__main__":
    # pylint: disable=line-too-long
    config_content = _read_config()
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="subcmd",
                                       help="Subcommands")
    # binding parser
    bind_parser = subparsers.add_parser("bind",
                                        help="binding local port to remote")
    bind_parser.add_argument("port",
                             help="port to bind")
    bind_parser.add_argument("-u", "--user-name",
                             dest="user_name",
                             help="user name for login (default: %(default)s)",
                             default=config_content.get("user_name", None))
    bind_parser.add_argument("-d", "--destination",
                             dest="dest", metavar="ADDRESS",
                             help="destination address (default: %(default)s)",
                             default=config_content.get("dest", None))
    bind_parser.add_argument("-i", "--id-file",
                             dest="id_file", metavar="ID_FILE",
                             help="login id file (default: %(default)s)",
                             default=config_content.get("id_file", None))
    bind_parser.add_argument("-H", "--host",
                             dest="host", metavar="ADDRESS",
                             default="127.0.0.1",
                             help="host address (default: %(default)s)")
    bind_parser.add_argument("-P", "--ssh-port",
                             dest="ssh_port", metavar="PORT",
                             help="ssh port (default: %(default)s)",
                             default=config_content.get("ssh_port", "22"))
    # break_connect parser
    break_parser = subparsers.add_parser("break",
                                         help="break tunneling")
    break_parser.add_argument("-d", "--destination",
                              dest="dest",
                              default=config_content.get("dest", None),
                              help="destination to break connection (default: %(default)s)")
    break_parser.add_argument("-p", "--port",
                              dest="port",
                              default=None,
                              help=("port to break (default: %(default)s, "
                                    " break all port)"))
    # ls_tunnel parser
    ls_tunnel_parser = subparsers.add_parser("ls",
                                             help="list all tunneling")
    # config parser
    config_parser = subparsers.add_parser("config",
                                          help="setup default configuration")
    # def ls_config():
    ls_config_parser = subparsers.add_parser("ls-config",
                                             help="show current default config")
    # pylint: enable=line-too-long
    subcmd = parser.parse_args().subcmd
    argv = sys.argv[2:]
    if subcmd == "bind":
        bind_args = vars(bind_parser.parse_args(argv))
        bind(**bind_args)
    elif subcmd == "break":
        break_args = vars(break_parser.parse_args(argv))
        break_connect(**break_args)
    elif subcmd == "ls":
        ls_tunnel()
    elif subcmd == "config":
        config()
    elif subcmd == "ls-config":
        ls_config()
    else:
        parser.print_help()
